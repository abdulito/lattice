#!/usr/bin/env bash
set -e

echo "Creating lattice bin directory"
sudo mkdir -p /opt/lattice/bin

echo "Creating /etc directories for etcd and kube components"
sudo mkdir -p /etc/opt/etcd \
              /etc/opt/kubernetes/apiserver \
              /etc/opt/kubernetes/controller-manager

echo "Installing kube-apiserver certs"
sudo cp /tmp/kubernetes/artifacts/master-node/kubernetes.pem \
        /tmp/kubernetes/artifacts/master-node/kubernetes-key.pem \
        /etc/opt/kubernetes/apiserver

echo "Installing kube-controller-manager certs"
sudo cp /tmp/kubernetes/artifacts/master-node/kubernetes.pem \
        /tmp/kubernetes/artifacts/master-node/kubernetes-key.pem \
        /etc/opt/kubernetes/controller-manager

echo "Installing kube-apiserver known_tokens"
sudo mv /tmp/kubernetes/artifacts/master-node/known_tokens.csv /etc/opt/kubernetes/apiserver/known_tokens.csv

echo "Installing kube-controller-manager kubeconfig"
sudo cp /etc/opt/kubernetes/kubelet/kubeconfig /etc/opt/kubernetes/controller-manager/kubeconfig

echo "Adding kubeconfig for kubectl"
mkdir ~/.kube
sudo cp /etc/opt/kubernetes/kubelet/kubeconfig ~/.kube
sudo chown core ~/.kube/kubeconfig

echo "Installing dns master-node register service"
sudo mv /tmp/kubernetes/artifacts/master-node/register-master-node-dns.service \
        /etc/systemd/system
sudo systemctl daemon-reload

echo "Installing etcd volume attachment services"
sudo mv /tmp/kubernetes/artifacts/master-node/attach-dev-xvdf.service \
        /tmp/kubernetes/artifacts/master-node/format-var-opt-etcd.service \
        /tmp/kubernetes/artifacts/master-node/var-opt-etcd.mount \
        /etc/systemd/system
sudo systemctl daemon-reload

echo "Enabling etcd"
sudo mv /tmp/kubernetes/artifacts/master-node/kube-etcd.service \
        /etc/systemd/system/kube-etcd.service
sudo systemctl daemon-reload
sudo systemctl enable kube-etcd

echo "Overriding and enabling kubelet"
sudo mkdir -p /etc/systemd/system/kubelet.service.d
sudo mv /tmp/kubernetes/artifacts/master-node/kubelet-override.conf \
        /etc/systemd/system/kubelet.service.d/master-override.conf
sudo systemctl daemon-reload
sudo systemctl enable kubelet

echo "Adding control plane pods to manifests file"
sudo mkdir -p /var/opt/kubernetes/manifests
sudo mv /tmp/kubernetes/artifacts/master-node/kube-apiserver.json \
        /tmp/kubernetes/artifacts/master-node/kube-scheduler.json \
        /tmp/kubernetes/artifacts/master-node/kube-controller-manager.json \
        /var/opt/kubernetes/manifests

echo "Installing kubeconfig for local admin access"
sudo mkdir -p /etc/opt/kubernetes/admin
sudo mv /tmp/kubernetes/artifacts/master-node/admin.kubeconfig \
        /etc/opt/kubernetes/admin/kubeconfig

echo "Installing wait-for-kube-api"
sudo mv /tmp/kubernetes/artifacts/master-node/wait-for-kube-api \
        /opt/lattice/bin/master-wait-for-kube-api
sudo chmod +x /opt/lattice/bin/master-wait-for-kube-api
sudo mv /tmp/kubernetes/artifacts/master-node/wait-for-kube-api.service \
        /etc/systemd/system/wait-for-kube-api.service
sudo systemctl daemon-reload
sudo systemctl enable wait-for-kube-api

echo "Installing bootstrap-lattice"
sudo mkdir -p /etc/opt/lattice/bootstrap-kube-resources
sudo mv /tmp/kubernetes/artifacts/master-node/bootstrap-lattice.service \
        /etc/systemd/system/bootstrap-lattice.service
sudo systemctl daemon-reload
sudo systemctl enable bootstrap-lattice

# Trick ignition into running again when an instance is booted from this AMI
# https://github.com/coreos/bugs/issues/2090
echo "Ensuring ignition will run on next boot"
sudo touch /boot/coreos/first_boot
sudo rm /etc/machine-id

# If we do not remove this file, every instance provisioned from this AMI will think its hostname
# is that of the instance that the AMI was snapshotted from
echo "Removing /etc/hostname"
sudo rm /etc/hostname
