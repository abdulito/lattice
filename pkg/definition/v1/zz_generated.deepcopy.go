// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1

import (
	definition "github.com/mlab-lattice/lattice/pkg/definition"
	tree "github.com/mlab-lattice/lattice/pkg/definition/tree"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Container) DeepCopyInto(out *Container) {
	*out = *in
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerBuild)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Exec != nil {
		in, out := &in.Exec, &out.Exec
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerExec)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make(map[int32]ContainerPort, len(*in))
		for key, val := range *in {
			newVal := new(ContainerPort)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	if in.HealthCheck != nil {
		in, out := &in.HealthCheck, &out.HealthCheck
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerHealthCheck)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerResources)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Container.
func (in *Container) DeepCopy() *Container {
	if in == nil {
		return nil
	}
	out := new(Container)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerBuild) DeepCopyInto(out *ContainerBuild) {
	*out = *in
	if in.CommandBuild != nil {
		in, out := &in.CommandBuild, &out.CommandBuild
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerBuildCommand)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DockerImage != nil {
		in, out := &in.DockerImage, &out.DockerImage
		if *in == nil {
			*out = nil
		} else {
			*out = new(DockerImage)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerBuild.
func (in *ContainerBuild) DeepCopy() *ContainerBuild {
	if in == nil {
		return nil
	}
	out := new(ContainerBuild)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerBuildCommand) DeepCopyInto(out *ContainerBuildCommand) {
	*out = *in
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerBuildSource)
			(*in).DeepCopyInto(*out)
		}
	}
	out.BaseImage = in.BaseImage
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(ContainerEnvironment, len(*in))
		for key, val := range *in {
			newVal := new(ValueOrSecret)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerBuildCommand.
func (in *ContainerBuildCommand) DeepCopy() *ContainerBuildCommand {
	if in == nil {
		return nil
	}
	out := new(ContainerBuildCommand)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerBuildSource) DeepCopyInto(out *ContainerBuildSource) {
	*out = *in
	if in.GitRepository != nil {
		in, out := &in.GitRepository, &out.GitRepository
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitRepository)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerBuildSource.
func (in *ContainerBuildSource) DeepCopy() *ContainerBuildSource {
	if in == nil {
		return nil
	}
	out := new(ContainerBuildSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in ContainerEnvironment) DeepCopyInto(out *ContainerEnvironment) {
	{
		in := &in
		*out = make(ContainerEnvironment, len(*in))
		for key, val := range *in {
			newVal := new(ValueOrSecret)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerEnvironment.
func (in ContainerEnvironment) DeepCopy() ContainerEnvironment {
	if in == nil {
		return nil
	}
	out := new(ContainerEnvironment)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerExec) DeepCopyInto(out *ContainerExec) {
	*out = *in
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(ContainerEnvironment, len(*in))
		for key, val := range *in {
			newVal := new(ValueOrSecret)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerExec.
func (in *ContainerExec) DeepCopy() *ContainerExec {
	if in == nil {
		return nil
	}
	out := new(ContainerExec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerHealthCheck) DeepCopyInto(out *ContainerHealthCheck) {
	*out = *in
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerHealthCheckHTTP)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerHealthCheck.
func (in *ContainerHealthCheck) DeepCopy() *ContainerHealthCheck {
	if in == nil {
		return nil
	}
	out := new(ContainerHealthCheck)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerHealthCheckHTTP) DeepCopyInto(out *ContainerHealthCheckHTTP) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerHealthCheckHTTP.
func (in *ContainerHealthCheckHTTP) DeepCopy() *ContainerHealthCheckHTTP {
	if in == nil {
		return nil
	}
	out := new(ContainerHealthCheckHTTP)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerPort) DeepCopyInto(out *ContainerPort) {
	*out = *in
	if in.ExternalAccess != nil {
		in, out := &in.ExternalAccess, &out.ExternalAccess
		if *in == nil {
			*out = nil
		} else {
			*out = new(ContainerPortExternalAccess)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerPort.
func (in *ContainerPort) DeepCopy() *ContainerPort {
	if in == nil {
		return nil
	}
	out := new(ContainerPort)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerPortExternalAccess) DeepCopyInto(out *ContainerPortExternalAccess) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerPortExternalAccess.
func (in *ContainerPortExternalAccess) DeepCopy() *ContainerPortExternalAccess {
	if in == nil {
		return nil
	}
	out := new(ContainerPortExternalAccess)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerResources) DeepCopyInto(out *ContainerResources) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerResources.
func (in *ContainerResources) DeepCopy() *ContainerResources {
	if in == nil {
		return nil
	}
	out := new(ContainerResources)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerImage) DeepCopyInto(out *DockerImage) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerImage.
func (in *DockerImage) DeepCopy() *DockerImage {
	if in == nil {
		return nil
	}
	out := new(DockerImage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepository) DeepCopyInto(out *GitRepository) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SSHKey != nil {
		in, out := &in.SSHKey, &out.SSHKey
		if *in == nil {
			*out = nil
		} else {
			*out = new(SecretRef)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepository.
func (in *GitRepository) DeepCopy() *GitRepository {
	if in == nil {
		return nil
	}
	out := new(GitRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryReference) DeepCopyInto(out *GitRepositoryReference) {
	*out = *in
	if in.File != nil {
		in, out := &in.File, &out.File
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitRepository != nil {
		in, out := &in.GitRepository, &out.GitRepository
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitRepository)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryReference.
func (in *GitRepositoryReference) DeepCopy() *GitRepositoryReference {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Job) DeepCopyInto(out *Job) {
	*out = *in
	in.Container.DeepCopyInto(&out.Container)
	if in.Sidecars != nil {
		in, out := &in.Sidecars, &out.Sidecars
		*out = make(map[string]Container, len(*in))
		for key, val := range *in {
			newVal := new(Container)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Job.
func (in *Job) DeepCopy() *Job {
	if in == nil {
		return nil
	}
	out := new(Job)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyComponent is an autogenerated deepcopy function, copying the receiver, creating a new definition.Component.
func (in *Job) DeepCopyComponent() definition.Component {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePool) DeepCopyInto(out *NodePool) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePool.
func (in *NodePool) DeepCopy() *NodePool {
	if in == nil {
		return nil
	}
	out := new(NodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolOrReference) DeepCopyInto(out *NodePoolOrReference) {
	*out = *in
	if in.NodePool != nil {
		in, out := &in.NodePool, &out.NodePool
		if *in == nil {
			*out = nil
		} else {
			*out = new(NodePool)
			**out = **in
		}
	}
	if in.NodePoolPath != nil {
		in, out := &in.NodePoolPath, &out.NodePoolPath
		if *in == nil {
			*out = nil
		} else {
			*out = new(tree.PathSubcomponent)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolOrReference.
func (in *NodePoolOrReference) DeepCopy() *NodePoolOrReference {
	if in == nil {
		return nil
	}
	out := new(NodePoolOrReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Reference) DeepCopyInto(out *Reference) {
	*out = *in
	if in.GitRepository != nil {
		in, out := &in.GitRepository, &out.GitRepository
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitRepositoryReference)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	out.Parameters = in.Parameters.DeepCopy()
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Reference.
func (in *Reference) DeepCopy() *Reference {
	if in == nil {
		return nil
	}
	out := new(Reference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyComponent is an autogenerated deepcopy function, copying the receiver, creating a new definition.Component.
func (in *Reference) DeepCopyComponent() definition.Component {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReferenceParameters.
func (in ReferenceParameters) DeepCopy() ReferenceParameters {
	if in == nil {
		return nil
	}
	out := new(ReferenceParameters)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretRef) DeepCopyInto(out *SecretRef) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretRef.
func (in *SecretRef) DeepCopy() *SecretRef {
	if in == nil {
		return nil
	}
	out := new(SecretRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Service) DeepCopyInto(out *Service) {
	*out = *in
	in.Container.DeepCopyInto(&out.Container)
	if in.Sidecars != nil {
		in, out := &in.Sidecars, &out.Sidecars
		*out = make(map[string]Container, len(*in))
		for key, val := range *in {
			newVal := new(Container)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	if in.NodePool != nil {
		in, out := &in.NodePool, &out.NodePool
		if *in == nil {
			*out = nil
		} else {
			*out = new(NodePoolOrReference)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Service.
func (in *Service) DeepCopy() *Service {
	if in == nil {
		return nil
	}
	out := new(Service)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyComponent is an autogenerated deepcopy function, copying the receiver, creating a new definition.Component.
func (in *Service) DeepCopyComponent() definition.Component {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *System) DeepCopyInto(out *System) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make(map[string]definition.Component, len(*in))
		for key, val := range *in {
			if val == nil {
				(*out)[key] = nil
			} else {
				(*out)[key] = val.DeepCopyComponent()
			}
		}
	}
	if in.NodePools != nil {
		in, out := &in.NodePools, &out.NodePools
		*out = make(map[string]NodePool, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new System.
func (in *System) DeepCopy() *System {
	if in == nil {
		return nil
	}
	out := new(System)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyComponent is an autogenerated deepcopy function, copying the receiver, creating a new definition.Component.
func (in *System) DeepCopyComponent() definition.Component {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ValueOrSecret) DeepCopyInto(out *ValueOrSecret) {
	*out = *in
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		if *in == nil {
			*out = nil
		} else {
			*out = new(SecretRef)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ValueOrSecret.
func (in *ValueOrSecret) DeepCopy() *ValueOrSecret {
	if in == nil {
		return nil
	}
	out := new(ValueOrSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkloadContainers) DeepCopyInto(out *WorkloadContainers) {
	*out = *in
	in.Main.DeepCopyInto(&out.Main)
	if in.Sidecars != nil {
		in, out := &in.Sidecars, &out.Sidecars
		*out = make(map[string]Container, len(*in))
		for key, val := range *in {
			newVal := new(Container)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkloadContainers.
func (in *WorkloadContainers) DeepCopy() *WorkloadContainers {
	if in == nil {
		return nil
	}
	out := new(WorkloadContainers)
	in.DeepCopyInto(out)
	return out
}
