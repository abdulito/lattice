// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/mlab-lattice/system/pkg/backend/kubernetes/customresource/apis/lattice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeployLister helps list Deploies.
type DeployLister interface {
	// List lists all Deploies in the indexer.
	List(selector labels.Selector) (ret []*v1.Deploy, err error)
	// Deploies returns an object that can list and get Deploies.
	Deploies(namespace string) DeployNamespaceLister
	DeployListerExpansion
}

// deployLister implements the DeployLister interface.
type deployLister struct {
	indexer cache.Indexer
}

// NewDeployLister returns a new DeployLister.
func NewDeployLister(indexer cache.Indexer) DeployLister {
	return &deployLister{indexer: indexer}
}

// List lists all Deploies in the indexer.
func (s *deployLister) List(selector labels.Selector) (ret []*v1.Deploy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Deploy))
	})
	return ret, err
}

// Deploies returns an object that can list and get Deploies.
func (s *deployLister) Deploies(namespace string) DeployNamespaceLister {
	return deployNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeployNamespaceLister helps list and get Deploies.
type DeployNamespaceLister interface {
	// List lists all Deploies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Deploy, err error)
	// Get retrieves the Deploy from the indexer for a given namespace and name.
	Get(name string) (*v1.Deploy, error)
	DeployNamespaceListerExpansion
}

// deployNamespaceLister implements the DeployNamespaceLister
// interface.
type deployNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Deploies in the indexer for a given namespace.
func (s deployNamespaceLister) List(selector labels.Selector) (ret []*v1.Deploy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Deploy))
	})
	return ret, err
}

// Get retrieves the Deploy from the indexer for a given namespace and name.
func (s deployNamespaceLister) Get(name string) (*v1.Deploy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("deploy"), name)
	}
	return obj.(*v1.Deploy), nil
}
