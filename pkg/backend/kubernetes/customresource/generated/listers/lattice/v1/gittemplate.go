// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/mlab-lattice/lattice/pkg/backend/kubernetes/customresource/apis/lattice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitTemplateLister helps list GitTemplates.
type GitTemplateLister interface {
	// List lists all GitTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1.GitTemplate, err error)
	// GitTemplates returns an object that can list and get GitTemplates.
	GitTemplates(namespace string) GitTemplateNamespaceLister
	GitTemplateListerExpansion
}

// gitTemplateLister implements the GitTemplateLister interface.
type gitTemplateLister struct {
	indexer cache.Indexer
}

// NewGitTemplateLister returns a new GitTemplateLister.
func NewGitTemplateLister(indexer cache.Indexer) GitTemplateLister {
	return &gitTemplateLister{indexer: indexer}
}

// List lists all GitTemplates in the indexer.
func (s *gitTemplateLister) List(selector labels.Selector) (ret []*v1.GitTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitTemplate))
	})
	return ret, err
}

// GitTemplates returns an object that can list and get GitTemplates.
func (s *gitTemplateLister) GitTemplates(namespace string) GitTemplateNamespaceLister {
	return gitTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitTemplateNamespaceLister helps list and get GitTemplates.
type GitTemplateNamespaceLister interface {
	// List lists all GitTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.GitTemplate, err error)
	// Get retrieves the GitTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1.GitTemplate, error)
	GitTemplateNamespaceListerExpansion
}

// gitTemplateNamespaceLister implements the GitTemplateNamespaceLister
// interface.
type gitTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitTemplates in the indexer for a given namespace.
func (s gitTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1.GitTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitTemplate))
	})
	return ret, err
}

// Get retrieves the GitTemplate from the indexer for a given namespace and name.
func (s gitTemplateNamespaceLister) Get(name string) (*v1.GitTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gittemplate"), name)
	}
	return obj.(*v1.GitTemplate), nil
}
