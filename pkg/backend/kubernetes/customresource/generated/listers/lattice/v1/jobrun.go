// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/mlab-lattice/lattice/pkg/backend/kubernetes/customresource/apis/lattice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JobRunLister helps list JobRuns.
type JobRunLister interface {
	// List lists all JobRuns in the indexer.
	List(selector labels.Selector) (ret []*v1.JobRun, err error)
	// JobRuns returns an object that can list and get JobRuns.
	JobRuns(namespace string) JobRunNamespaceLister
	JobRunListerExpansion
}

// jobRunLister implements the JobRunLister interface.
type jobRunLister struct {
	indexer cache.Indexer
}

// NewJobRunLister returns a new JobRunLister.
func NewJobRunLister(indexer cache.Indexer) JobRunLister {
	return &jobRunLister{indexer: indexer}
}

// List lists all JobRuns in the indexer.
func (s *jobRunLister) List(selector labels.Selector) (ret []*v1.JobRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.JobRun))
	})
	return ret, err
}

// JobRuns returns an object that can list and get JobRuns.
func (s *jobRunLister) JobRuns(namespace string) JobRunNamespaceLister {
	return jobRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JobRunNamespaceLister helps list and get JobRuns.
type JobRunNamespaceLister interface {
	// List lists all JobRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.JobRun, err error)
	// Get retrieves the JobRun from the indexer for a given namespace and name.
	Get(name string) (*v1.JobRun, error)
	JobRunNamespaceListerExpansion
}

// jobRunNamespaceLister implements the JobRunNamespaceLister
// interface.
type jobRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JobRuns in the indexer for a given namespace.
func (s jobRunNamespaceLister) List(selector labels.Selector) (ret []*v1.JobRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.JobRun))
	})
	return ret, err
}

// Get retrieves the JobRun from the indexer for a given namespace and name.
func (s jobRunNamespaceLister) Get(name string) (*v1.JobRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("jobrun"), name)
	}
	return obj.(*v1.JobRun), nil
}
