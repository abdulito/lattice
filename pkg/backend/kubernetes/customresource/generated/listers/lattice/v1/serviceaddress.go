// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/mlab-lattice/lattice/pkg/backend/kubernetes/customresource/apis/lattice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceAddressLister helps list ServiceAddresses.
type ServiceAddressLister interface {
	// List lists all ServiceAddresses in the indexer.
	List(selector labels.Selector) (ret []*v1.ServiceAddress, err error)
	// ServiceAddresses returns an object that can list and get ServiceAddresses.
	ServiceAddresses(namespace string) ServiceAddressNamespaceLister
	ServiceAddressListerExpansion
}

// serviceAddressLister implements the ServiceAddressLister interface.
type serviceAddressLister struct {
	indexer cache.Indexer
}

// NewServiceAddressLister returns a new ServiceAddressLister.
func NewServiceAddressLister(indexer cache.Indexer) ServiceAddressLister {
	return &serviceAddressLister{indexer: indexer}
}

// List lists all ServiceAddresses in the indexer.
func (s *serviceAddressLister) List(selector labels.Selector) (ret []*v1.ServiceAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceAddress))
	})
	return ret, err
}

// ServiceAddresses returns an object that can list and get ServiceAddresses.
func (s *serviceAddressLister) ServiceAddresses(namespace string) ServiceAddressNamespaceLister {
	return serviceAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceAddressNamespaceLister helps list and get ServiceAddresses.
type ServiceAddressNamespaceLister interface {
	// List lists all ServiceAddresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ServiceAddress, err error)
	// Get retrieves the ServiceAddress from the indexer for a given namespace and name.
	Get(name string) (*v1.ServiceAddress, error)
	ServiceAddressNamespaceListerExpansion
}

// serviceAddressNamespaceLister implements the ServiceAddressNamespaceLister
// interface.
type serviceAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceAddresses in the indexer for a given namespace.
func (s serviceAddressNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceAddress))
	})
	return ret, err
}

// Get retrieves the ServiceAddress from the indexer for a given namespace and name.
func (s serviceAddressNamespaceLister) Get(name string) (*v1.ServiceAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("serviceaddress"), name)
	}
	return obj.(*v1.ServiceAddress), nil
}
