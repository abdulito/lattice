// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/mlab-lattice/system/pkg/backend/kubernetes/customresource/apis/lattice/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TeardownLister helps list Teardowns.
type TeardownLister interface {
	// List lists all Teardowns in the indexer.
	List(selector labels.Selector) (ret []*v1.Teardown, err error)
	// Teardowns returns an object that can list and get Teardowns.
	Teardowns(namespace string) TeardownNamespaceLister
	TeardownListerExpansion
}

// teardownLister implements the TeardownLister interface.
type teardownLister struct {
	indexer cache.Indexer
}

// NewTeardownLister returns a new TeardownLister.
func NewTeardownLister(indexer cache.Indexer) TeardownLister {
	return &teardownLister{indexer: indexer}
}

// List lists all Teardowns in the indexer.
func (s *teardownLister) List(selector labels.Selector) (ret []*v1.Teardown, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Teardown))
	})
	return ret, err
}

// Teardowns returns an object that can list and get Teardowns.
func (s *teardownLister) Teardowns(namespace string) TeardownNamespaceLister {
	return teardownNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TeardownNamespaceLister helps list and get Teardowns.
type TeardownNamespaceLister interface {
	// List lists all Teardowns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Teardown, err error)
	// Get retrieves the Teardown from the indexer for a given namespace and name.
	Get(name string) (*v1.Teardown, error)
	TeardownNamespaceListerExpansion
}

// teardownNamespaceLister implements the TeardownNamespaceLister
// interface.
type teardownNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Teardowns in the indexer for a given namespace.
func (s teardownNamespaceLister) List(selector labels.Selector) (ret []*v1.Teardown, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Teardown))
	})
	return ret, err
}

// Get retrieves the Teardown from the indexer for a given namespace and name.
func (s teardownNamespaceLister) Get(name string) (*v1.Teardown, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("teardown"), name)
	}
	return obj.(*v1.Teardown), nil
}
