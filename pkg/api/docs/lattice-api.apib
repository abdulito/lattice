FORMAT: 1A

# Lattice API Docs

This document describes the lattice API.

## Group systems

### /v1/systems

#### List systems [GET]

List systems

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "definitionUrl": {
                    "description": "git url for for where the definition lives in",
                    "type": "string"
                  },
                  "id": {
                    "description": "System ID",
                    "type": "object"
                  },
                  "services": {
                    "description": "map for service path and services currently running in the system",
                    "type": "object"
                  },
                  "state": {
                    "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"",
                    "type": "object"
                  }
                }
              }
            }

#### Create system [POST]

Create a new system

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "type": "string"
                },
                "id": {
                  "type": "object"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "description": "git url for for where the definition lives in",
                  "type": "string"
                },
                "id": {
                  "description": "System ID",
                  "type": "object"
                },
                "services": {
                  "description": "map for service path and services currently running in the system",
                  "type": "object"
                },
                "state": {
                  "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "type": "string"
                },
                "id": {
                  "type": "object"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

### /v1/systems/{system}

#### Get system [GET]

get system

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "description": "git url for for where the definition lives in",
                  "type": "string"
                },
                "id": {
                  "description": "System ID",
                  "type": "object"
                },
                "services": {
                  "description": "map for service path and services currently running in the system",
                  "type": "object"
                },
                "state": {
                  "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

#### Delete system [DELETE]

Delete system

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object"
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group builds

### /v1/systems/{system}/builds

#### Lists builds [GET]

list builds

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {},
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "completionTimestamp": {
                    "description": "Completion timestamp",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID",
                    "type": "object"
                  },
                  "services": {
                    "description": "Services maps service paths (e.g. /foo/bar/buzz) to the status of the build for that service in the Build.",
                    "type": "object"
                  },
                  "startTimestamp": {
                    "description": "Start timestamp",
                    "type": "string"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  },
                  "version": {
                    "description": "Version",
                    "type": "object"
                  }
                }
              }
            }

#### Build system [POST]

build system

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "version": {
                  "type": "object"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "Completion timestamp",
                  "type": "string"
                },
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "services": {
                  "description": "Services maps service paths (e.g. /foo/bar/buzz) to the status of the build for that service in the Build.",
                  "type": "object"
                },
                "startTimestamp": {
                  "description": "Start timestamp",
                  "type": "string"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                },
                "version": {
                  "description": "Version",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "version": {
                  "type": "object"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "message": "nostrud sed fugiat proident et"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

### /v1/systems/{system}/builds/{id}

#### Get build [GET]

get build

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "Completion timestamp",
                  "type": "string"
                },
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "services": {
                  "description": "Services maps service paths (e.g. /foo/bar/buzz) to the status of the build for that service in the Build.",
                  "type": "object"
                },
                "startTimestamp": {
                  "description": "Start timestamp",
                  "type": "string"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                },
                "version": {
                  "description": "Version",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "deserunt ea in"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

#### Get build logs [GET /v1/systems/{system}/builds/{id}/logs]

get logs

+ Parameters

    + system (required)
    
    + id (required)
    
    + path (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            amet aliquip anim deserunt

    + Schema

            {
              "type": "string"
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group deploys

### /v1/systems/{system}/deploys

#### Lists deploys [GET]

list deploys

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "buildId": {
                    "description": "Build ID",
                    "type": "object"
                  },
                  "id": {
                    "description": "ID",
                    "type": "object"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  }
                }
              }
            }

#### Deploy system [POST]

build system

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "type": "object"
                },
                "version": {
                  "type": "object"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "description": "Build ID",
                  "type": "object"
                },
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "type": "object"
                },
                "version": {
                  "type": "object"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "message": "consequ"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

### /v1/systems/{system}/deploys/{id}

#### Get deploy [GET]

get deploy

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "description": "Build ID",
                  "type": "object"
                },
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "voluptate laboris occaecat nostrud"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group jobs

### /v1/systems/{system}/jobs

#### Lists jobs [GET]

list jobs

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "completionTimestamp": {
                    "description": "CompletionTimestamp",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID",
                    "type": "object"
                  },
                  "path": {
                    "description": "Path",
                    "type": "string"
                  },
                  "startTimestamp": {
                    "description": "StartTimestamp",
                    "type": "string"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  }
                }
              }
            }

### /v1/systems/{system}/jobs/{id}

#### Get job [GET]

get job

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "CompletionTimestamp",
                  "type": "string"
                },
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "path": {
                  "description": "Path",
                  "type": "string"
                },
                "startTimestamp": {
                  "description": "StartTimestamp",
                  "type": "string"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "et in sit proident"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

#### Get job logs [GET /v1/systems/{system}/jobs/{id}/logs]

get job logs

+ Parameters

    + system (required)
    
    + id (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            labore aliqua voluptate

    + Schema

            {
              "type": "string"
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group node-pools

### /v1/systems/{system}/node-pools

#### Lists node pools [GET]

list node pools

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "path": "incididunt pariatur consectetur",
                "instanceType": "veniam velit mollit",
                "numInstances": 69984488
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "failure_info": {
                    "description": "FailureInfo",
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message",
                        "type": "string"
                      },
                      "time": {
                        "description": "Time",
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "description": "ID",
                    "type": "string"
                  },
                  "instanceType": {
                    "description": "FIXME: how to deal with epochs?\nInstanceType",
                    "type": "string"
                  },
                  "numInstances": {
                    "description": "NumInstances",
                    "type": "integer"
                  },
                  "path": {
                    "description": "Path",
                    "type": "string"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  }
                }
              }
            }

### /v1/systems/{system}/node-pools/{id}

#### Get node pool [GET]

get node pool

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "numInstances": -5525454
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "failure_info": {
                  "description": "FailureInfo",
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Message",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time",
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "description": "ID",
                  "type": "string"
                },
                "instanceType": {
                  "description": "FIXME: how to deal with epochs?\nInstanceType",
                  "type": "string"
                },
                "numInstances": {
                  "description": "NumInstances",
                  "type": "integer"
                },
                "path": {
                  "description": "Path",
                  "type": "string"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group secrets

### /v1/systems/{system}/secrets

#### Lists secrets [GET]

list secrets

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "value": "anim occaecat dolore nisi sed"
              },
              {
                "path": "exercitation ea pariatur proident",
                "value": "ut proident est exercitation"
              },
              {
                "name": "sit mi",
                "value": "eu aliquip mollit",
                "path": "aute dolor tempor sunt n"
              },
              {},
              {
                "path": "nulla sunt",
                "value": "aute dolor",
                "name": "deserunt id"
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name",
                    "type": "string"
                  },
                  "path": {
                    "description": "Secret service path",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value",
                    "type": "string"
                  }
                }
              }
            }

#### set secret [POST]

set secret

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name",
                  "type": "string"
                },
                "path": {
                  "description": "Secret service path",
                  "type": "string"
                },
                "value": {
                  "description": "Value",
                  "type": "string"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "value": "exercitation enim aliqua"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

### /v1/systems/{system}/secrets/{secret}

#### Get secret [GET]

get secret

+ Parameters

    + system (required)
    
    + secret (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name",
                  "type": "string"
                },
                "path": {
                  "description": "Secret service path",
                  "type": "string"
                },
                "value": {
                  "description": "Value",
                  "type": "string"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

#### Delete system [DELETE]

get system

+ Parameters

    + system (required)
    
    + secret (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object"
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group services

### /v1/systems/{system}/services

#### Lists services [GET]

list services

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "updatedInstances": 67368669
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "availableInstances": {
                    "description": "AvailableInstances",
                    "type": "integer"
                  },
                  "failureInfo": {
                    "description": "FailureInfo",
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message",
                        "type": "string"
                      },
                      "time": {
                        "description": "Time",
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "description": "Service ID",
                    "type": "object"
                  },
                  "instances": {
                    "description": "Instances",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "message": {
                    "description": "Message",
                    "type": "string"
                  },
                  "path": {
                    "description": "Service Path",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports",
                    "type": "object"
                  },
                  "staleInstances": {
                    "description": "StaleInstances",
                    "type": "integer"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  },
                  "terminatingInstances": {
                    "description": "TerminatingInstances",
                    "type": "integer"
                  },
                  "updatedInstances": {
                    "description": "UpdatedInstances",
                    "type": "integer"
                  }
                }
              }
            }

### /v1/systems/{system}/services/{id}

#### Get service [GET]

get service

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "availableInstances": {
                  "description": "AvailableInstances",
                  "type": "integer"
                },
                "failureInfo": {
                  "description": "FailureInfo",
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Message",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time",
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "description": "Service ID",
                  "type": "object"
                },
                "instances": {
                  "description": "Instances",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "message": {
                  "description": "Message",
                  "type": "string"
                },
                "path": {
                  "description": "Service Path",
                  "type": "string"
                },
                "ports": {
                  "description": "Ports",
                  "type": "object"
                },
                "staleInstances": {
                  "description": "StaleInstances",
                  "type": "integer"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                },
                "terminatingInstances": {
                  "description": "TerminatingInstances",
                  "type": "integer"
                },
                "updatedInstances": {
                  "description": "UpdatedInstances",
                  "type": "integer"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "es"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

#### Get service logs [GET /v1/systems/{system}/services/{id}/logs]

get service logs

+ Parameters

    + system (required)
    
    + id (required)
    
    + instance (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            enim

    + Schema

            {
              "type": "string"
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "sint eiusmod do tempor"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group teardowns

### /v1/systems/{system}/teardowns

#### Lists teardowns [GET]

list teardowns

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID",
                    "type": "object"
                  },
                  "state": {
                    "description": "State",
                    "type": "object"
                  }
                }
              }
            }

#### Teardown system [POST]

teardown system

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "quis cupidatat occaecat sint"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

### /v1/systems/{system}/teardowns/{id}

#### Get teardown [GET]

get teardown

+ Parameters

    + system (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID",
                  "type": "object"
                },
                "state": {
                  "description": "State",
                  "type": "object"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

            {
              "message": "nisi occaecat esse"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "object"
                },
                "message": {
                  "type": "string",
                  "example": "status bad request"
                }
              }
            }

## Group versions

### /v1/systems/{system}/versions

#### Lists system versions [GET]

list teardowns

+ Parameters

    + system (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object"
              }
            }

