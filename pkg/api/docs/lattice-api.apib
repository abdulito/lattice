FORMAT: 1A

# Lattice API

Welcome to lattice api

### /v1/systems

#### Lists systems [GET]

list systems

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {
                "definitionUrl": "ullamco"
              },
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "definitionUrl": {
                    "description": "git url for for where the definition lives in\n",
                    "type": "string"
                  },
                  "id": {
                    "description": "System ID\n",
                    "type": "object"
                  },
                  "services": {
                    "description": "map for service path and services currently running in the system\n",
                    "type": "object"
                  },
                  "state": {
                    "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"\n",
                    "type": "object"
                  }
                }
              }
            }

#### Create a new system [POST]

create system

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "definitionUrl": "ut tempor cillum amet sit"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "type": "string"
                },
                "id": {
                  "type": "object"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "description": "git url for for where the definition lives in\n",
                  "type": "string"
                },
                "id": {
                  "description": "System ID\n",
                  "type": "object"
                },
                "services": {
                  "description": "map for service path and services currently running in the system\n",
                  "type": "object"
                },
                "state": {
                  "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{id}

#### Get system [GET]

get system

+ Parameters

    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "definitionUrl": "eu"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "definitionUrl": {
                  "description": "git url for for where the definition lives in\n",
                  "type": "string"
                },
                "id": {
                  "description": "System ID\n",
                  "type": "object"
                },
                "services": {
                  "description": "map for service path and services currently running in the system\n",
                  "type": "object"
                },
                "state": {
                  "description": "State. One of \"pending\", \"failed\", \"deleting\", \"stable\", \"degraded\", \"scaling\", \"updating\"\n",
                  "type": "object"
                }
              }
            }

#### Delete system [DELETE]

get system

+ Parameters

    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object"
            }

### /v1/systems/{systemId}/builds

#### Lists builds [GET]

list builds

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "completionTimestamp": "consequat voluptate Ut nisi"
              },
              {},
              {
                "startTimestamp": "culpa est"
              },
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "completionTimestamp": {
                    "description": "Completion timestamp\n",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID\n",
                    "type": "object"
                  },
                  "services": {
                    "description": "Services maps service paths (e.g. /foo/bar/buzz) to the status of the build for that service in the Build.\n",
                    "type": "object"
                  },
                  "startTimestamp": {
                    "description": "Start timestamp\n",
                    "type": "string"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  },
                  "version": {
                    "description": "Version\n",
                    "type": "object"
                  }
                }
              }
            }

#### Run job [POST]

run job

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "command": [
                "quis Excepteur ipsum ullamco cillum",
                "proident",
                "reprehenderi",
                "in id ut in"
              ]
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "command": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "environment": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "CompletionTimestamp\n",
                  "type": "string"
                },
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "path": {
                  "description": "Path\n",
                  "type": "string"
                },
                "startTimestamp": {
                  "description": "StartTimestamp\n",
                  "type": "string"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/builds/{id}

#### Get build [GET]

get build

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "startTimestamp": "ut Ut anim consectetur"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "Completion timestamp\n",
                  "type": "string"
                },
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "services": {
                  "description": "Services maps service paths (e.g. /foo/bar/buzz) to the status of the build for that service in the Build.\n",
                  "type": "object"
                },
                "startTimestamp": {
                  "description": "Start timestamp\n",
                  "type": "string"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                },
                "version": {
                  "description": "Version\n",
                  "type": "object"
                }
              }
            }

#### Get build logs [GET /v1/systems/{systemId}/builds/{id}/logs]

get logs

+ Parameters

    + systemId (required)
    
    + id (required)
    
    + path (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            nostrud cillum aliquip Ut elit

    + Schema

            {
              "type": "string"
            }

### /v1/systems/{systemId}/deploys

#### Lists deploys [GET]

list deploys

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "buildId": {
                    "description": "Build ID\n",
                    "type": "object"
                  },
                  "id": {
                    "description": "ID\n",
                    "type": "object"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  }
                }
              }
            }

#### Deploy system [POST]

build system

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "type": "object"
                },
                "version": {
                  "type": "object"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "description": "Build ID\n",
                  "type": "object"
                },
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/deploys/{id}

#### Get deploy [GET]

get deploy

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "buildId": {
                  "description": "Build ID\n",
                  "type": "object"
                },
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/jobs

#### Lists jobs [GET]

list jobs

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {
                "completionTimestamp": "cillum",
                "startTimestamp": "consequat sunt irure"
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "completionTimestamp": {
                    "description": "CompletionTimestamp\n",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID\n",
                    "type": "object"
                  },
                  "path": {
                    "description": "Path\n",
                    "type": "string"
                  },
                  "startTimestamp": {
                    "description": "StartTimestamp\n",
                    "type": "string"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  }
                }
              }
            }

### /v1/systems/{systemId}/jobs/{id}

#### Get job [GET]

get job

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "path": "sed"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "completionTimestamp": {
                  "description": "CompletionTimestamp\n",
                  "type": "string"
                },
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "path": {
                  "description": "Path\n",
                  "type": "string"
                },
                "startTimestamp": {
                  "description": "StartTimestamp\n",
                  "type": "string"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

#### Get job logs [GET /v1/systems/{systemId}/jobs/{id}/logs]

get job logs

+ Parameters

    + systemId (required)
    
    + id (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            mollit ipsum ea anim pariatur

    + Schema

            {
              "type": "string"
            }

### /v1/systems/{systemId}/node-pools

#### Lists node pools [GET]

list node pools

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "failure_info": {
                    "description": "FailureInfo\n",
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message\n",
                        "type": "string"
                      },
                      "time": {
                        "description": "Time\n",
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "description": "ID\n",
                    "type": "string"
                  },
                  "instanceType": {
                    "description": "FIXME: how to deal with epochs?\nInstanceType\n",
                    "type": "string"
                  },
                  "numInstances": {
                    "description": "NumInstances\n",
                    "type": "integer"
                  },
                  "path": {
                    "description": "Path\n",
                    "type": "string"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  }
                }
              }
            }

### /v1/systems/{systemId}/node-pools/{id}

#### Get node pool [GET]

get node pool

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "path": "enim sunt ut in sit"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "failure_info": {
                  "description": "FailureInfo\n",
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Message\n",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time\n",
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "description": "ID\n",
                  "type": "string"
                },
                "instanceType": {
                  "description": "FIXME: how to deal with epochs?\nInstanceType\n",
                  "type": "string"
                },
                "numInstances": {
                  "description": "NumInstances\n",
                  "type": "integer"
                },
                "path": {
                  "description": "Path\n",
                  "type": "string"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/secrets

#### Lists secrets [GET]

list secrets

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "path": "cillum"
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name\n",
                    "type": "string"
                  },
                  "path": {
                    "description": "Secret service path\n",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value\n",
                    "type": "string"
                  }
                }
              }
            }

#### set secret [POST]

set secret

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "value": "Duis"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "name": "Ut ea mollit Lorem",
              "path": "ut veniam"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name\n",
                  "type": "string"
                },
                "path": {
                  "description": "Secret service path\n",
                  "type": "string"
                },
                "value": {
                  "description": "Value\n",
                  "type": "string"
                }
              }
            }

### /v1/systems/{systemId}/secrets/{id}

#### Get secret [GET]

get secret

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name\n",
                  "type": "string"
                },
                "path": {
                  "description": "Secret service path\n",
                  "type": "string"
                },
                "value": {
                  "description": "Value\n",
                  "type": "string"
                }
              }
            }

#### Delete system [DELETE]

get system

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object"
            }

### /v1/systems/{systemId}/services

#### Lists services [GET]

list services

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {
                "updatedInstances": -98256387
              },
              {
                "availableInstances": 52683853
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "availableInstances": {
                    "description": "AvailableInstances\n",
                    "type": "integer"
                  },
                  "failureInfo": {
                    "description": "FailureInfo\n",
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message\n",
                        "type": "string"
                      },
                      "time": {
                        "description": "Time\n",
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "description": "Service ID\n",
                    "type": "object"
                  },
                  "instances": {
                    "description": "Instances\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "message": {
                    "description": "Message\n",
                    "type": "string"
                  },
                  "path": {
                    "description": "Service Path\n",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports\n",
                    "type": "object"
                  },
                  "staleInstances": {
                    "description": "StaleInstances\n",
                    "type": "integer"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  },
                  "terminatingInstances": {
                    "description": "TerminatingInstances\n",
                    "type": "integer"
                  },
                  "updatedInstances": {
                    "description": "UpdatedInstances\n",
                    "type": "integer"
                  }
                }
              }
            }

### /v1/systems/{systemId}/services/{id}

#### Get service [GET]

get service

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "availableInstances": {
                  "description": "AvailableInstances\n",
                  "type": "integer"
                },
                "failureInfo": {
                  "description": "FailureInfo\n",
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Message\n",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time\n",
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "description": "Service ID\n",
                  "type": "object"
                },
                "instances": {
                  "description": "Instances\n",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "message": {
                  "description": "Message\n",
                  "type": "string"
                },
                "path": {
                  "description": "Service Path\n",
                  "type": "string"
                },
                "ports": {
                  "description": "Ports\n",
                  "type": "object"
                },
                "staleInstances": {
                  "description": "StaleInstances\n",
                  "type": "integer"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                },
                "terminatingInstances": {
                  "description": "TerminatingInstances\n",
                  "type": "integer"
                },
                "updatedInstances": {
                  "description": "UpdatedInstances\n",
                  "type": "integer"
                }
              }
            }

#### Get service logs [GET /v1/systems/{systemId}/services/{id}/logs]

get service logs

+ Parameters

    + systemId (required)
    
    + id (required)
    
    + instance (required)
    
    + sidecar
    
    + follow
    
    + previous
    
    + timestamps
    
    + tail
    
    + since
    
    + sinceTime

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    log stream

    + Body

            amet sunt

    + Schema

            {
              "type": "string"
            }

### /v1/systems/{systemId}/teardowns

#### Lists teardowns [GET]

list teardowns

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID\n",
                    "type": "object"
                  },
                  "state": {
                    "description": "State\n",
                    "type": "object"
                  }
                }
              }
            }

#### Teardown system [POST]

teardown system

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/teardowns/{id}

#### Get teardown [GET]

get teardown

+ Parameters

    + systemId (required)
    
    + id (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID\n",
                  "type": "object"
                },
                "state": {
                  "description": "State\n",
                  "type": "object"
                }
              }
            }

### /v1/systems/{systemId}/versions

#### Lists system versions [GET]

list teardowns

+ Parameters

    + systemId (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            [
              {},
              {},
              {},
              {}
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "type": "object"
              }
            }

